{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d5be01fd3cd00777743b2614ccae85e610a8fecc","modified":1556089517709},{"_id":"themes/raytaylorism/.DS_Store","hash":"c92c2dac1118afba52c9c39ede3d67856ee4321b","modified":1556089517730},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1556089517730},{"_id":"themes/raytaylorism/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1556089517731},{"_id":"themes/raytaylorism/README.md","hash":"9e5d5bbf2cebd80c9a8737c390b038a7e1565a93","modified":1556089517731},{"_id":"themes/raytaylorism/_config.yml","hash":"1c616787c19c9148cd5f49cf12bca1c60d1f6629","modified":1556089517731},{"_id":"themes/raytaylorism/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1556089517743},{"_id":"source/_data/about.json","hash":"06546b67d67b0f9572f48d3e76b48b4eb29fe3db","modified":1556089517709},{"_id":"source/_data/hint.json","hash":"dabb8eb989db7fbbfad1e505d0019002f27ac72b","modified":1556089517709},{"_id":"source/_data/link.json","hash":"244296761824053288567aee10c2f23d4968c350","modified":1556089517709},{"_id":"source/_data/reading.json","hash":"3e08543d34cc69a24a2bff75157b0911d79f6c04","modified":1556089517709},{"_id":"source/_posts/Hexo+github Pages博客搭建.md","hash":"7bba2f316c7884365ee682cd8fbee1e6b373e2c5","modified":1556089517710},{"_id":"source/_posts/Jenkins-iOS持续集成细节记录.md","hash":"bd2766986445f6b3842030990714ef57e449f243","modified":1556096194766},{"_id":"source/_posts/VSCode中Flow报错解决.md","hash":"959bb1591b7d8ccf039ebfb3a5eadf83b7584b1b","modified":1556089517710},{"_id":"source/about/index.md","hash":"9d7d1ec737629ae1c7293e75ceeba9d3d2d1b832","modified":1556089517711},{"_id":"source/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1556089517711},{"_id":"themes/raytaylorism/_data/about.json","hash":"25aaf77b982304e6618dffd14d8b2fa25ee5649b","modified":1556089517731},{"_id":"themes/raytaylorism/_data/hint.json","hash":"dabb8eb989db7fbbfad1e505d0019002f27ac72b","modified":1556089517731},{"_id":"themes/raytaylorism/_data/link.json","hash":"cafb8df66a02d87de1db9ea51a0cfe33edeed393","modified":1556089517731},{"_id":"themes/raytaylorism/_data/reading.json","hash":"796f64f4ef44b38504bd88d9b5eec0284d53c15f","modified":1556089517732},{"_id":"themes/raytaylorism/_data/slider.json","hash":"1921c801bb21e1bcde5207d38a3f2d06ff0b2f90","modified":1556089517732},{"_id":"themes/raytaylorism/_md/.DS_Store","hash":"c78c4302cf17691ddd0de43250a3c03dad1d8e70","modified":1556089517732},{"_id":"themes/raytaylorism/languages/default.yml","hash":"936a72db42d299cd5e912198b9ace4fd64c476fd","modified":1556089517733},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"c5fcb3d2b353d9747238ca78106953301f9a2018","modified":1556089517733},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"cc4a90af7901872b0e343bd4a7114f897fe4ffa6","modified":1556089517733},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1556089517741},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"7c85cc1ab9c0b566a278770c639341b6ea9f5655","modified":1556089517741},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1556089517741},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1556089517742},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"65f271da5806eed69c120bef89ee4c6af45af9fd","modified":1556089517742},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8910b2feac8c0f16c702afbd6182f91a5a90b3c6","modified":1556089517742},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"52906ee0e7e679d417d5bc385e054e16e9ff0256","modified":1556089517742},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"e6d10ddf00c326b012d10cfa2521c2697f18bf9b","modified":1556089517742},{"_id":"themes/raytaylorism/source/favicon.png","hash":"d44008b0d6298287cdcfe744a2c8c562569f67ff","modified":1556089517757},{"_id":"themes/raytaylorism/source/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1556089517759},{"_id":"source/_posts/Hexo+github Pages博客搭建/title1.png","hash":"39af2874fab15584bc83aeb4442c859faca464e1","modified":1556089517710},{"_id":"source/_posts/Jenkins-iOS持续集成细节记录/yuanma1.png","hash":"43dca8e6b4b5d91418d1edb47bb58653088f17c0","modified":1556092551296},{"_id":"source/_posts/VSCode中Flow报错解决/problem1.png","hash":"0b92ab7f9a560920072ac5f8789c491857babad9","modified":1556089517711},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1556089517732},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1556089517732},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1556089517733},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"6fc4dc05d153dbf1dd955df4ff19c380692f87e9","modified":1556089517734},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"37c38ef6972ddd92668ea08983f4b34230b39d52","modified":1556089517734},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"068cd4f944f8f0810d06bc79d11042da406c7067","modified":1556089517734},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"571115474d7c1acb382334931f02514b23e851a3","modified":1556089517734},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1556089517734},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"42ad838e39c007226eb4151292a459173e30d8ea","modified":1556089517735},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"6634e01d620e2f341c5e3dcda180caf83f042252","modified":1556089517735},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"406c0bdb3ef224bb5ec375123426a0babae2724a","modified":1556089517735},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1556089517735},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1556089517735},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"87142bbc383a66af90182cc4774048b483a4fd8d","modified":1556089517736},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1556089517736},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1556089517739},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"fdcbb516a3745d0a70c94e565d53510d9f47693c","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"9561e783fb6f69ad288582675486f282a29bf2b5","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1556089517740},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"31b93c078a03af98de504eeb0153f9c0dbc74ed9","modified":1556089517741},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1556089517741},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1556089517757},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1556089517759},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1556089517736},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"7bdcfd6b3a5b7dee57e9b96ca90a127b7562fc3f","modified":1556089517736},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1556089517736},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"cc246117386c6cbde13e3b4316ba5e85af659df6","modified":1556089517737},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"f0e5e249d2bd6dc2a72baf0f71d2d67463c7b3ad","modified":1556089517737},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"abc5087971fb743e16249d2746983e0ccbf74c37","modified":1556089517737},{"_id":"themes/raytaylorism/layout/_partial/plugin/page_stat.ejs","hash":"25a44cc3f4828efcd0e1c914f25fe9a49bffc253","modified":1556089517737},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1556089517738},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1556089517738},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1556089517738},{"_id":"themes/raytaylorism/layout/_partial/post/prevnext.ejs","hash":"dbb790cf454fda546c82a411a3b50ebb0129a1e8","modified":1556089517738},{"_id":"themes/raytaylorism/layout/_partial/post/readtimes.ejs","hash":"56fab931adc45c7d3ef70f7aeaea339148a753aa","modified":1556089517738},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"2a9ee2d487a7d42d8974c98c9980f01bacee7065","modified":1556089517739},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1556089517739},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"e11498240ece670129a2fbfb2fed16ff315344d4","modified":1556089517739},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"c6c44ea53bbfd3838c7bf7cc236c6db1a4b9460e","modified":1556089517739},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"432d08a7e81b70ea16f997227994490c08fbeec8","modified":1556089517743},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1556089517743},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"767968e233e918c655feb49dfe7a360c6fc65458","modified":1556089517743},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1556089517744},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1556089517744},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1556089517744},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"94bdf4d6da4ec154124ac66008c8dff66882c7e4","modified":1556089517744},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1556089517744},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"92e1c226202782e5d429fbe72b98ae4e07fc0233","modified":1556089517745},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1556089517745},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1556089517745},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1556089517745},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"710eea97e5c98a1426d1a3c0fc8f648279c7a82d","modified":1556089517745},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"5fdde64bdb6bdc07cac264905410fcebbe91e8b7","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"20df0f8a54729980094514fc726b51591ada1ad7","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"ba69d422bb4c7803a89db6f324f448d2248881ad","modified":1556089517746},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1556089517756},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1556089517756},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1556089517757},{"_id":"themes/raytaylorism/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1556089517758},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1556089517758},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1556089517756},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1556089517750},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1556089517751},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1556089517753},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1556089517753},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1556089517754},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1556089517754},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1556089517755},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1556089517747},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1556089517748},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1556089517749},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1556089517749},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1556089517751},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1556089517751},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1556089517752},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1556089517754},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1556089517755},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1556089517748},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1556089517750},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1556089517752},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1556089517754},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1556089517755},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1556089517748},{"_id":"public/atom.xml","hash":"4a7fa89386d1da8fbd4b6fb3a5619eeae6b79bd4","modified":1556096201372},{"_id":"public/search.xml","hash":"51e8364bc27e88149caa1955dae8b0cd9a40baf2","modified":1556096201498},{"_id":"public/about/index.html","hash":"fb343da67f7388e9c5c91620a589afee8399e9d0","modified":1556095750533},{"_id":"public/reading/index.html","hash":"72f147e6de17e8eadcba93209b3c368eff3ebac3","modified":1556095750562},{"_id":"public/2019/03/20/VSCode中Flow报错解决/index.html","hash":"7242a0f46309c691af192e8f3d169df379d2e5b0","modified":1556095750563},{"_id":"public/2018/04/11/Hexo+github Pages博客搭建/index.html","hash":"909bdc4504f3d5e5d5c7dbacc2c2297ae6b3b294","modified":1556095750563},{"_id":"public/archives/index.html","hash":"fe2f6ec71d984ee1568e8233a348424f2df33685","modified":1556095750563},{"_id":"public/archives/2018/index.html","hash":"2739d2921574974acace6555a9d37ad32cb385da","modified":1556095750563},{"_id":"public/archives/2018/04/index.html","hash":"9bd9bc5aa1d8af6ff0b29d8cbbd65b0a2087ee3c","modified":1556095750563},{"_id":"public/archives/2019/index.html","hash":"b816ed659a49af807fb7880f401270135d95a777","modified":1556095750564},{"_id":"public/archives/2019/03/index.html","hash":"4ee326c49be97f06d6cc6c536acc88c3a452c460","modified":1556095750564},{"_id":"public/index.html","hash":"c92f8dad047f2ba135651a971c68560e3a8ed883","modified":1556095750564},{"_id":"public/tags/博客/index.html","hash":"4be7ab49eb5c46540112ce33f2dd55aff8f48924","modified":1556095750564},{"_id":"public/tags/VSCode/index.html","hash":"09bba6aa47144cadca74777d2df84c790d811678","modified":1556095750564},{"_id":"public/tags/ReactNative/index.html","hash":"99b50e6ad213928c6535c371d06c872e43c26879","modified":1556095750564},{"_id":"public/tags/Flow/index.html","hash":"923a79021a4549b219ebe32b515cde6c6b973790","modified":1556095750564},{"_id":"public/2019/04/24/Jenkins-iOS持续集成细节记录/index.html","hash":"3e8c2c8bad0a48a330799e94b1e3a22c83a792aa","modified":1556096201507},{"_id":"public/archives/2019/04/index.html","hash":"4c2b551c56bf3bdaf58ab6cefddb88423199cedf","modified":1556096201507},{"_id":"public/tags/Jenkins/index.html","hash":"8f7956e8eab2b04ba3c0cfd9bf86148b2ca2d9ac","modified":1556095750571},{"_id":"public/tags/iOS/index.html","hash":"34f68a33fd042be5ebf2f20dba218a872ff5cbf5","modified":1556095750571},{"_id":"public/tags/持续集成/index.html","hash":"68d9bfb7c9a5302c53dd408bf33d395c403f2374","modified":1556095750571},{"_id":"public/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1556095750578},{"_id":"public/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1556095750578},{"_id":"public/2018/04/11/Hexo+github Pages博客搭建/title1.png","hash":"39af2874fab15584bc83aeb4442c859faca464e1","modified":1556095750579},{"_id":"public/2019/03/20/VSCode中Flow报错解决/problem1.png","hash":"0b92ab7f9a560920072ac5f8789c491857babad9","modified":1556095750579},{"_id":"public/2019/04/24/Jenkins-iOS持续集成细节记录/yuanma1.png","hash":"43dca8e6b4b5d91418d1edb47bb58653088f17c0","modified":1556095750579},{"_id":"public/favicon.png","hash":"d44008b0d6298287cdcfe744a2c8c562569f67ff","modified":1556095751069},{"_id":"public/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1556095751069},{"_id":"public/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1556095751069},{"_id":"public/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1556095751070},{"_id":"public/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1556095751070},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1556095751070},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1556095751070},{"_id":"public/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1556095751071},{"_id":"public/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1556095751077},{"_id":"public/css/style.css","hash":"55a917def994d7b8bd35785f6b3d147435bc0b88","modified":1556095751077},{"_id":"public/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1556095751077},{"_id":"public/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1556095751079},{"_id":"public/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1556095751079},{"_id":"public/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1556095751087},{"_id":"public/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1556095751093},{"_id":"public/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1556095751097},{"_id":"public/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1556095751099},{"_id":"public/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1556095751102}],"Category":[],"Data":[{"_id":"about","data":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]}},{"_id":"hint","data":{"new":{"selector":[".menu-reading",".menu-about"]}}},{"_id":"link","data":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}],"Page":[{"title":"关于","layout":"about","_content":"大家好，我是Yarn_zyk。欢迎来到我的个人技术博客。\n\n希望能将自己平时学到的技术能分享给大家。\n","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n大家好，我是Yarn_zyk。欢迎来到我的个人技术博客。\n\n希望能将自己平时学到的技术能分享给大家。\n","date":"2019-04-24T07:05:17.711Z","updated":"2019-04-24T07:05:17.711Z","path":"about/index.html","comments":1,"_id":"cjuuz8d770001kl2c0ytwo7bv","content":"<p>大家好，我是Yarn_zyk。欢迎来到我的个人技术博客。</p>\n<p>希望能将自己平时学到的技术能分享给大家。</p>\n","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}},"excerpt":"","more":"<p>大家好，我是Yarn_zyk。欢迎来到我的个人技术博客。</p>\n<p>希望能将自己平时学到的技术能分享给大家。</p>\n"},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2019-04-24T07:05:17.711Z","updated":"2019-04-24T07:05:17.711Z","path":"reading/index.html","comments":1,"_id":"cjuuz8d7a0003kl2ckcrv3t57","content":"","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}},"excerpt":"","more":""}],"Post":[{"title":"Hexo+Github Pages博客搭建","date":"2018-04-11T07:21:09.000Z","_content":"\n# 前言\n\n\n我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。\n<!-- more -->\n\n# 方案选择\n网上有各种各样的搭建个人博客的方式，最初我是选则GitHub Pages + Jekyll的方案，后来搜了一下Jekyll的主题，感觉不是很美丽（如想使用Jekyll可以参考[一步步在GitHub上创建博客主页](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html) 。最终选择了Hexo + GitHub Pages的方案，而且不需要购买域名，可以说是零成本。\n# 关于GitHub Pages\n\n[GitHub Pages](https://pages.github.com) 是GitHub推出的一个服务，非常适合搭建博客。主要考虑以下几个优点：\n\n- 提供300M免费存储空间（相当于一个免费的服务器，而且是没有流量限制）\n- 提供域名usernmae.github.io（免费的域名，不足之处就是可能国内访问速度不怎么快）\n- 有Hexo和Jekyll等博客框架的支持（有很多热心的开发者贡献了较多的主题，可以随意挑选）\n\n>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to http://you.github.com. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!\n\nGitHub Pages也非常乐意，大家在上面搭建博客。\n\n首先，你要有一个GitHub的账户，建立一个`yourusername.github.io`的仓库，这个操作对经常使用GitHub的人来说不算难事，这里不详细介绍了，如果不会的话可以百度或者参考[这里](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)。创建完成后，就可以进行下一步了。\n\n# Hexo搭建\n\nHexo环境搭建，会依赖较多的工具。安装的过程也会出现各种各样的错误，根据错误在网上搜一下，见招拆招，基本能顺利解决问题。\n## 安装RVM和Ruby\n\nRVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换\n\n```highlight \n$ \\curl -sSL https://get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n\n```\n\n列出已知的 Ruby 版本\n\n```highlight \nrvm list known\n```\n\n安装一个 Ruby 版本\n\n```highlight\nrvm install 2.2.0 --disable-binary\n```\n\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。\n\n切换 Ruby 版本\n\n```highlight \nrvm use 2.2.0\n```\n\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n\n```highlight \nrvm use 2.2.0 --default \n```\n\n查询已经安装的ruby\n\n```highlight \nrvm list\n```\n\n卸载一个已安装版本\n\n```highlight \nrvm remove 1.8.7\n```\n\nRVM的安装主要是为了控制Ruby的版本，我此次使用的Ruby版本是最新的2.4.1，如果安装遇到困难的可以查看[这里](https://ruby-china.org/wiki/rvm-guide)。\n\n## 安装Node和npm\n\n在安装Ruby过程中，系统会自动安装Homebrew，因此直接可以用Homebrew来安装Node。\n\n```highlight\nbrew install node\n```\n执行以下命令查看是否安装成功\n\n```highlight \nnode -v\nnpm -v\n```\n## 安装Hexo\n\n[Hexo](https://hexo.io)的安装很简单，官方网站给出的安装方式：\n\n```highlight \nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n    \n这样Hexo的环境已经搭建完成，并且blog这个文件夹就是一个简单的demo。执行过`hexo server`后就能用浏览器通过`http://localhost:4000/`来访问自己的博客页了。\n\n\n\n# 撰写博文\n\n\n## 新建博文\n完成以上步骤之后，可以预览到自己的博客效果了，接下来我比较关心的是如何新建文章。新建文章有个要注意的地方是，不能直接把普通.md拖进`_post`目录下，是会报错的。\n\n```highlight \n hexo new hello-test    # 格式是： hexo new ｛文章名｝\n```\n\n需要通过命令来创建新的文章,打开新建的`hello-test.md`\n\n![测试图片](Hexo+github Pages博客搭建/title1.png)\n\n在blog的根目录下，`_config.yml`文件比较重要，主要是对Hexo的配置以及站点的相关配置。\n\n\n## 博文图片\n\n关于博文图片，网上很多例子都是推荐七牛云，通过贴链接的方式，把图片加在博文中。我这里推荐将图片放在本地。\n\n1 把主页配置文件`_config.yml` 里的`post_asset_folder:`这个选项设置为`true`\n\n2 在你的hexo目录下执行这样一句话`npm install hexo-asset-image --save`，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git\n\n3 等待一小段时间后，再运行`hexo n \"xxxx\"来生成md博文时，/source/_posts`文件夹内除了`xxxx.md`文件还有一个同名的文件夹\n\n4 最后在`xxxx.md`中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在`xxxx.md`中按照markdown的格式引入图片：\n\n`![你想输入的替代文字](xxxx/图片名.jpg)`\n\n注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。\n\n最后自己验证一下能否正确加载即可。\n\n\n# 更换主题\n\n\nHexo的主题相当于是博客的模板，在Hexo官网的[Themes](https://hexo.io/themes/)中，找到很多模板，可以选择喜欢的进行fork。有些还有中文文档，对英文不是很好的人（比如我）来说很友好。\n\n我这边使用的是[tutuge](http://tutuge.me)博客应用的Hexo主题[raytaylorism](https://github.com/raytaylorlin/hexo-theme-raytaylorism)。主题配置是中文文档，非常简单，大家按照步骤基本可以配置完成。\n\n\n# 远程部署\n\n在之前，已经建立了一个`yourusername.github.io`的仓库了，接下来要通过远程部署来完成用`https://yourusername.github.io` 直接访问你的博客。\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n```highlight \nvim _config.yml\n```\n\n翻到最下面，改成我这样子的\n\n```highlight \ndeploy:\n\n\ttype: git\n\n \trepo: https://github.com/yourusername.github.io/yourusername.github.io.github.io.git\n\n \tbranch: master\n```\n\n\n然后执行命令：\n\n\n```highlight \nhexo d -g\n```\n\n就可以把自己的博客部署到GitHub Pages了，这个操作是有延迟的，一般要等几分钟才能通过`https://yourusername.github.io`访问查看到效果，不能太心急。\n\n如果配置过程中遇到SSH Key的问题，请参考网上的[教程](https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&fps=1)。\n\n自己的博客源码，可以再建一个Github仓库用来管理，`yourusername.github.io`只能用来部署自己的博客。\n\n\n#  总结\n\n使用Hexo + GitHub Pages搭建个人博客可以说是简单快捷，0成本，本文也没有写的特别详细，一些简单的坑通过搜索还是可以快速解决的。这也是我搭建完个人博客后的第一篇文章，不足之处，希望大家多多指点。\n\n\n#  扩展阅读\n\n[1] [一步步在GitHub上创建博客主页](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)\n\n[2][GitHub Pages](https://pages.github.com)\n\n[3][Hexo](https://hexo.io)\n\n[4][RVM安装手册](https://ruby-china.org/wiki/rvm-guide)\n\n[5][hexo生成博文插入图片](https://blog.csdn.net/sugar_rainbow/article/details/57415705)\n\n[6][土土哥的技术博客](http://tutuge.me)\n\n\n\n\n\n\n\n","source":"_posts/Hexo+github Pages博客搭建.md","raw":"---\ntitle: Hexo+Github Pages博客搭建\ndate: 2018-04-11 15:21:09\ntags:\n\t- 博客\n---\n\n# 前言\n\n\n我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。\n<!-- more -->\n\n# 方案选择\n网上有各种各样的搭建个人博客的方式，最初我是选则GitHub Pages + Jekyll的方案，后来搜了一下Jekyll的主题，感觉不是很美丽（如想使用Jekyll可以参考[一步步在GitHub上创建博客主页](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html) 。最终选择了Hexo + GitHub Pages的方案，而且不需要购买域名，可以说是零成本。\n# 关于GitHub Pages\n\n[GitHub Pages](https://pages.github.com) 是GitHub推出的一个服务，非常适合搭建博客。主要考虑以下几个优点：\n\n- 提供300M免费存储空间（相当于一个免费的服务器，而且是没有流量限制）\n- 提供域名usernmae.github.io（免费的域名，不足之处就是可能国内访问速度不怎么快）\n- 有Hexo和Jekyll等博客框架的支持（有很多热心的开发者贡献了较多的主题，可以随意挑选）\n\n>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to http://you.github.com. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!\n\nGitHub Pages也非常乐意，大家在上面搭建博客。\n\n首先，你要有一个GitHub的账户，建立一个`yourusername.github.io`的仓库，这个操作对经常使用GitHub的人来说不算难事，这里不详细介绍了，如果不会的话可以百度或者参考[这里](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)。创建完成后，就可以进行下一步了。\n\n# Hexo搭建\n\nHexo环境搭建，会依赖较多的工具。安装的过程也会出现各种各样的错误，根据错误在网上搜一下，见招拆招，基本能顺利解决问题。\n## 安装RVM和Ruby\n\nRVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换\n\n```highlight \n$ \\curl -sSL https://get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n\n```\n\n列出已知的 Ruby 版本\n\n```highlight \nrvm list known\n```\n\n安装一个 Ruby 版本\n\n```highlight\nrvm install 2.2.0 --disable-binary\n```\n\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。\n\n切换 Ruby 版本\n\n```highlight \nrvm use 2.2.0\n```\n\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n\n```highlight \nrvm use 2.2.0 --default \n```\n\n查询已经安装的ruby\n\n```highlight \nrvm list\n```\n\n卸载一个已安装版本\n\n```highlight \nrvm remove 1.8.7\n```\n\nRVM的安装主要是为了控制Ruby的版本，我此次使用的Ruby版本是最新的2.4.1，如果安装遇到困难的可以查看[这里](https://ruby-china.org/wiki/rvm-guide)。\n\n## 安装Node和npm\n\n在安装Ruby过程中，系统会自动安装Homebrew，因此直接可以用Homebrew来安装Node。\n\n```highlight\nbrew install node\n```\n执行以下命令查看是否安装成功\n\n```highlight \nnode -v\nnpm -v\n```\n## 安装Hexo\n\n[Hexo](https://hexo.io)的安装很简单，官方网站给出的安装方式：\n\n```highlight \nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n    \n这样Hexo的环境已经搭建完成，并且blog这个文件夹就是一个简单的demo。执行过`hexo server`后就能用浏览器通过`http://localhost:4000/`来访问自己的博客页了。\n\n\n\n# 撰写博文\n\n\n## 新建博文\n完成以上步骤之后，可以预览到自己的博客效果了，接下来我比较关心的是如何新建文章。新建文章有个要注意的地方是，不能直接把普通.md拖进`_post`目录下，是会报错的。\n\n```highlight \n hexo new hello-test    # 格式是： hexo new ｛文章名｝\n```\n\n需要通过命令来创建新的文章,打开新建的`hello-test.md`\n\n![测试图片](Hexo+github Pages博客搭建/title1.png)\n\n在blog的根目录下，`_config.yml`文件比较重要，主要是对Hexo的配置以及站点的相关配置。\n\n\n## 博文图片\n\n关于博文图片，网上很多例子都是推荐七牛云，通过贴链接的方式，把图片加在博文中。我这里推荐将图片放在本地。\n\n1 把主页配置文件`_config.yml` 里的`post_asset_folder:`这个选项设置为`true`\n\n2 在你的hexo目录下执行这样一句话`npm install hexo-asset-image --save`，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git\n\n3 等待一小段时间后，再运行`hexo n \"xxxx\"来生成md博文时，/source/_posts`文件夹内除了`xxxx.md`文件还有一个同名的文件夹\n\n4 最后在`xxxx.md`中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在`xxxx.md`中按照markdown的格式引入图片：\n\n`![你想输入的替代文字](xxxx/图片名.jpg)`\n\n注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。\n\n最后自己验证一下能否正确加载即可。\n\n\n# 更换主题\n\n\nHexo的主题相当于是博客的模板，在Hexo官网的[Themes](https://hexo.io/themes/)中，找到很多模板，可以选择喜欢的进行fork。有些还有中文文档，对英文不是很好的人（比如我）来说很友好。\n\n我这边使用的是[tutuge](http://tutuge.me)博客应用的Hexo主题[raytaylorism](https://github.com/raytaylorlin/hexo-theme-raytaylorism)。主题配置是中文文档，非常简单，大家按照步骤基本可以配置完成。\n\n\n# 远程部署\n\n在之前，已经建立了一个`yourusername.github.io`的仓库了，接下来要通过远程部署来完成用`https://yourusername.github.io` 直接访问你的博客。\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n```highlight \nvim _config.yml\n```\n\n翻到最下面，改成我这样子的\n\n```highlight \ndeploy:\n\n\ttype: git\n\n \trepo: https://github.com/yourusername.github.io/yourusername.github.io.github.io.git\n\n \tbranch: master\n```\n\n\n然后执行命令：\n\n\n```highlight \nhexo d -g\n```\n\n就可以把自己的博客部署到GitHub Pages了，这个操作是有延迟的，一般要等几分钟才能通过`https://yourusername.github.io`访问查看到效果，不能太心急。\n\n如果配置过程中遇到SSH Key的问题，请参考网上的[教程](https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&fps=1)。\n\n自己的博客源码，可以再建一个Github仓库用来管理，`yourusername.github.io`只能用来部署自己的博客。\n\n\n#  总结\n\n使用Hexo + GitHub Pages搭建个人博客可以说是简单快捷，0成本，本文也没有写的特别详细，一些简单的坑通过搜索还是可以快速解决的。这也是我搭建完个人博客后的第一篇文章，不足之处，希望大家多多指点。\n\n\n#  扩展阅读\n\n[1] [一步步在GitHub上创建博客主页](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)\n\n[2][GitHub Pages](https://pages.github.com)\n\n[3][Hexo](https://hexo.io)\n\n[4][RVM安装手册](https://ruby-china.org/wiki/rvm-guide)\n\n[5][hexo生成博文插入图片](https://blog.csdn.net/sugar_rainbow/article/details/57415705)\n\n[6][土土哥的技术博客](http://tutuge.me)\n\n\n\n\n\n\n\n","slug":"Hexo+github Pages博客搭建","published":1,"updated":"2019-04-24T07:05:17.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuuz8d710000kl2cmgkmy5tc","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。<br><a id=\"more\"></a></p>\n<h1 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h1><p>网上有各种各样的搭建个人博客的方式，最初我是选则GitHub Pages + Jekyll的方案，后来搜了一下Jekyll的主题，感觉不是很美丽（如想使用Jekyll可以参考<a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">一步步在GitHub上创建博客主页</a> 。最终选择了Hexo + GitHub Pages的方案，而且不需要购买域名，可以说是零成本。</p>\n<h1 id=\"关于GitHub-Pages\"><a href=\"#关于GitHub-Pages\" class=\"headerlink\" title=\"关于GitHub Pages\"></a>关于GitHub Pages</h1><p><a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a> 是GitHub推出的一个服务，非常适合搭建博客。主要考虑以下几个优点：</p>\n<ul>\n<li>提供300M免费存储空间（相当于一个免费的服务器，而且是没有流量限制）</li>\n<li>提供域名usernmae.github.io（免费的域名，不足之处就是可能国内访问速度不怎么快）</li>\n<li>有Hexo和Jekyll等博客框架的支持（有很多热心的开发者贡献了较多的主题，可以随意挑选）</li>\n</ul>\n<blockquote>\n<p>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to <a href=\"http://you.github.com\" target=\"_blank\" rel=\"noopener\">http://you.github.com</a>. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!</p>\n</blockquote>\n<p>GitHub Pages也非常乐意，大家在上面搭建博客。</p>\n<p>首先，你要有一个GitHub的账户，建立一个<code>yourusername.github.io</code>的仓库，这个操作对经常使用GitHub的人来说不算难事，这里不详细介绍了，如果不会的话可以百度或者参考<a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">这里</a>。创建完成后，就可以进行下一步了。</p>\n<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>Hexo环境搭建，会依赖较多的工具。安装的过程也会出现各种各样的错误，根据错误在网上搜一下，见招拆招，基本能顺利解决问题。</p>\n<h2 id=\"安装RVM和Ruby\"><a href=\"#安装RVM和Ruby\" class=\"headerlink\" title=\"安装RVM和Ruby\"></a>安装RVM和Ruby</h2><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ \\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ source ~/.bashrc</span><br><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>列出已知的 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list known</span><br></pre></td></tr></table></figure>\n<p>安装一个 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。</p>\n<p>切换 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure>\n<p>查询已经安装的ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list</span><br></pre></td></tr></table></figure>\n<p>卸载一个已安装版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm remove 1.8.7</span><br></pre></td></tr></table></figure>\n<p>RVM的安装主要是为了控制Ruby的版本，我此次使用的Ruby版本是最新的2.4.1，如果安装遇到困难的可以查看<a href=\"https://ruby-china.org/wiki/rvm-guide\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"安装Node和npm\"><a href=\"#安装Node和npm\" class=\"headerlink\" title=\"安装Node和npm\"></a>安装Node和npm</h2><p>在安装Ruby过程中，系统会自动安装Homebrew，因此直接可以用Homebrew来安装Node。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n<p>执行以下命令查看是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>的安装很简单，官方网站给出的安装方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>这样Hexo的环境已经搭建完成，并且blog这个文件夹就是一个简单的demo。执行过<code>hexo server</code>后就能用浏览器通过<code>http://localhost:4000/</code>来访问自己的博客页了。</p>\n<h1 id=\"撰写博文\"><a href=\"#撰写博文\" class=\"headerlink\" title=\"撰写博文\"></a>撰写博文</h1><h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>完成以上步骤之后，可以预览到自己的博客效果了，接下来我比较关心的是如何新建文章。新建文章有个要注意的地方是，不能直接把普通.md拖进<code>_post</code>目录下，是会报错的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new hello-test    # 格式是： hexo new ｛文章名｝</span><br></pre></td></tr></table></figure>\n<p>需要通过命令来创建新的文章,打开新建的<code>hello-test.md</code></p>\n<p><img src=\"/2018/04/11/Hexo+github Pages博客搭建/title1.png\" alt=\"测试图片\"></p>\n<p>在blog的根目录下，<code>_config.yml</code>文件比较重要，主要是对Hexo的配置以及站点的相关配置。</p>\n<h2 id=\"博文图片\"><a href=\"#博文图片\" class=\"headerlink\" title=\"博文图片\"></a>博文图片</h2><p>关于博文图片，网上很多例子都是推荐七牛云，通过贴链接的方式，把图片加在博文中。我这里推荐将图片放在本地。</p>\n<p>1 把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>\n<p>2 在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p>\n<p>3 等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;来生成md博文时，/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p>\n<p>4 最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p>\n<p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p>\n<p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p>\n<p>最后自己验证一下能否正确加载即可。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>Hexo的主题相当于是博客的模板，在Hexo官网的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>中，找到很多模板，可以选择喜欢的进行fork。有些还有中文文档，对英文不是很好的人（比如我）来说很友好。</p>\n<p>我这边使用的是<a href=\"http://tutuge.me\" target=\"_blank\" rel=\"noopener\">tutuge</a>博客应用的Hexo主题<a href=\"https://github.com/raytaylorlin/hexo-theme-raytaylorism\" target=\"_blank\" rel=\"noopener\">raytaylorism</a>。主题配置是中文文档，非常简单，大家按照步骤基本可以配置完成。</p>\n<h1 id=\"远程部署\"><a href=\"#远程部署\" class=\"headerlink\" title=\"远程部署\"></a>远程部署</h1><p>在之前，已经建立了一个<code>yourusername.github.io</code>的仓库了，接下来要通过远程部署来完成用<code>https://yourusername.github.io</code> 直接访问你的博客。</p>\n<p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim _config.yml</span><br></pre></td></tr></table></figure>\n<p>翻到最下面，改成我这样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"></span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\"></span><br><span class=\"line\"> \trepo: https://github.com/yourusername.github.io/yourusername.github.io.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"> \tbranch: master</span><br></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<p>就可以把自己的博客部署到GitHub Pages了，这个操作是有延迟的，一般要等几分钟才能通过<code>https://yourusername.github.io</code>访问查看到效果，不能太心急。</p>\n<p>如果配置过程中遇到SSH Key的问题，请参考网上的<a href=\"https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&amp;fps=1\" target=\"_blank\" rel=\"noopener\">教程</a>。</p>\n<p>自己的博客源码，可以再建一个Github仓库用来管理，<code>yourusername.github.io</code>只能用来部署自己的博客。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用Hexo + GitHub Pages搭建个人博客可以说是简单快捷，0成本，本文也没有写的特别详细，一些简单的坑通过搜索还是可以快速解决的。这也是我搭建完个人博客后的第一篇文章，不足之处，希望大家多多指点。</p>\n<h1 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h1><p>[1] <a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">一步步在GitHub上创建博客主页</a></p>\n<p>[2]<a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a></p>\n<p>[3]<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p>[4]<a href=\"https://ruby-china.org/wiki/rvm-guide\" target=\"_blank\" rel=\"noopener\">RVM安装手册</a></p>\n<p>[5]<a href=\"https://blog.csdn.net/sugar_rainbow/article/details/57415705\" target=\"_blank\" rel=\"noopener\">hexo生成博文插入图片</a></p>\n<p>[6]<a href=\"http://tutuge.me\" target=\"_blank\" rel=\"noopener\">土土哥的技术博客</a></p>\n","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。<br></p>","more":"<p></p>\n<h1 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h1><p>网上有各种各样的搭建个人博客的方式，最初我是选则GitHub Pages + Jekyll的方案，后来搜了一下Jekyll的主题，感觉不是很美丽（如想使用Jekyll可以参考<a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">一步步在GitHub上创建博客主页</a> 。最终选择了Hexo + GitHub Pages的方案，而且不需要购买域名，可以说是零成本。</p>\n<h1 id=\"关于GitHub-Pages\"><a href=\"#关于GitHub-Pages\" class=\"headerlink\" title=\"关于GitHub Pages\"></a>关于GitHub Pages</h1><p><a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a> 是GitHub推出的一个服务，非常适合搭建博客。主要考虑以下几个优点：</p>\n<ul>\n<li>提供300M免费存储空间（相当于一个免费的服务器，而且是没有流量限制）</li>\n<li>提供域名usernmae.github.io（免费的域名，不足之处就是可能国内访问速度不怎么快）</li>\n<li>有Hexo和Jekyll等博客框架的支持（有很多热心的开发者贡献了较多的主题，可以随意挑选）</li>\n</ul>\n<blockquote>\n<p>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to <a href=\"http://you.github.com\" target=\"_blank\" rel=\"noopener\">http://you.github.com</a>. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!</p>\n</blockquote>\n<p>GitHub Pages也非常乐意，大家在上面搭建博客。</p>\n<p>首先，你要有一个GitHub的账户，建立一个<code>yourusername.github.io</code>的仓库，这个操作对经常使用GitHub的人来说不算难事，这里不详细介绍了，如果不会的话可以百度或者参考<a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">这里</a>。创建完成后，就可以进行下一步了。</p>\n<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>Hexo环境搭建，会依赖较多的工具。安装的过程也会出现各种各样的错误，根据错误在网上搜一下，见招拆招，基本能顺利解决问题。</p>\n<h2 id=\"安装RVM和Ruby\"><a href=\"#安装RVM和Ruby\" class=\"headerlink\" title=\"安装RVM和Ruby\"></a>安装RVM和Ruby</h2><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ \\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ source ~/.bashrc</span><br><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>列出已知的 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list known</span><br></pre></td></tr></table></figure>\n<p>安装一个 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。</p>\n<p>切换 Ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure>\n<p>查询已经安装的ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list</span><br></pre></td></tr></table></figure>\n<p>卸载一个已安装版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm remove 1.8.7</span><br></pre></td></tr></table></figure>\n<p>RVM的安装主要是为了控制Ruby的版本，我此次使用的Ruby版本是最新的2.4.1，如果安装遇到困难的可以查看<a href=\"https://ruby-china.org/wiki/rvm-guide\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"安装Node和npm\"><a href=\"#安装Node和npm\" class=\"headerlink\" title=\"安装Node和npm\"></a>安装Node和npm</h2><p>在安装Ruby过程中，系统会自动安装Homebrew，因此直接可以用Homebrew来安装Node。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n<p>执行以下命令查看是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>的安装很简单，官方网站给出的安装方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>这样Hexo的环境已经搭建完成，并且blog这个文件夹就是一个简单的demo。执行过<code>hexo server</code>后就能用浏览器通过<code>http://localhost:4000/</code>来访问自己的博客页了。</p>\n<h1 id=\"撰写博文\"><a href=\"#撰写博文\" class=\"headerlink\" title=\"撰写博文\"></a>撰写博文</h1><h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>完成以上步骤之后，可以预览到自己的博客效果了，接下来我比较关心的是如何新建文章。新建文章有个要注意的地方是，不能直接把普通.md拖进<code>_post</code>目录下，是会报错的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new hello-test    # 格式是： hexo new ｛文章名｝</span><br></pre></td></tr></table></figure>\n<p>需要通过命令来创建新的文章,打开新建的<code>hello-test.md</code></p>\n<p><img src=\"/2018/04/11/Hexo+github Pages博客搭建/title1.png\" alt=\"测试图片\"></p>\n<p>在blog的根目录下，<code>_config.yml</code>文件比较重要，主要是对Hexo的配置以及站点的相关配置。</p>\n<h2 id=\"博文图片\"><a href=\"#博文图片\" class=\"headerlink\" title=\"博文图片\"></a>博文图片</h2><p>关于博文图片，网上很多例子都是推荐七牛云，通过贴链接的方式，把图片加在博文中。我这里推荐将图片放在本地。</p>\n<p>1 把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>\n<p>2 在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p>\n<p>3 等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;来生成md博文时，/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p>\n<p>4 最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p>\n<p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p>\n<p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p>\n<p>最后自己验证一下能否正确加载即可。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>Hexo的主题相当于是博客的模板，在Hexo官网的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a>中，找到很多模板，可以选择喜欢的进行fork。有些还有中文文档，对英文不是很好的人（比如我）来说很友好。</p>\n<p>我这边使用的是<a href=\"http://tutuge.me\" target=\"_blank\" rel=\"noopener\">tutuge</a>博客应用的Hexo主题<a href=\"https://github.com/raytaylorlin/hexo-theme-raytaylorism\" target=\"_blank\" rel=\"noopener\">raytaylorism</a>。主题配置是中文文档，非常简单，大家按照步骤基本可以配置完成。</p>\n<h1 id=\"远程部署\"><a href=\"#远程部署\" class=\"headerlink\" title=\"远程部署\"></a>远程部署</h1><p>在之前，已经建立了一个<code>yourusername.github.io</code>的仓库了，接下来要通过远程部署来完成用<code>https://yourusername.github.io</code> 直接访问你的博客。</p>\n<p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim _config.yml</span><br></pre></td></tr></table></figure>\n<p>翻到最下面，改成我这样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"></span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\"></span><br><span class=\"line\"> \trepo: https://github.com/yourusername.github.io/yourusername.github.io.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"> \tbranch: master</span><br></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<p>就可以把自己的博客部署到GitHub Pages了，这个操作是有延迟的，一般要等几分钟才能通过<code>https://yourusername.github.io</code>访问查看到效果，不能太心急。</p>\n<p>如果配置过程中遇到SSH Key的问题，请参考网上的<a href=\"https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&amp;fps=1\" target=\"_blank\" rel=\"noopener\">教程</a>。</p>\n<p>自己的博客源码，可以再建一个Github仓库用来管理，<code>yourusername.github.io</code>只能用来部署自己的博客。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用Hexo + GitHub Pages搭建个人博客可以说是简单快捷，0成本，本文也没有写的特别详细，一些简单的坑通过搜索还是可以快速解决的。这也是我搭建完个人博客后的第一篇文章，不足之处，希望大家多多指点。</p>\n<h1 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h1><p>[1] <a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">一步步在GitHub上创建博客主页</a></p>\n<p>[2]<a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a></p>\n<p>[3]<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p>[4]<a href=\"https://ruby-china.org/wiki/rvm-guide\" target=\"_blank\" rel=\"noopener\">RVM安装手册</a></p>\n<p>[5]<a href=\"https://blog.csdn.net/sugar_rainbow/article/details/57415705\" target=\"_blank\" rel=\"noopener\">hexo生成博文插入图片</a></p>\n<p>[6]<a href=\"http://tutuge.me\" target=\"_blank\" rel=\"noopener\">土土哥的技术博客</a></p>"},{"title":"Jenkins+iOS持续集成细节记录","date":"2019-04-24T07:11:57.000Z","_content":"\n\n# 前言\n\niOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。\n\n<!-- more -->\n# 环境介绍\n\n- 系统版本：macOS Mojave 10.14.4 (18E226)\n- Xcode版本：Version 10.1 (10B61)\n- Jenkins版本：Jenkins ver. 2.164.2\n\n我的项目集成了cocoapods和2个Project，其中一个Project用了Git的submodule。\n\n\n# 开始搭建\n\nJenkins下载安装，完成后打开Jenkins的界面，下载一些插件，新建一个空的任务。接下来开始配置，配置我是分三步：1、下载源码 2、配置证书和打包选项 3、上传ipa。\n\n\n## 下载源码\n\n\n源码我使用的是Git，代码放在gitee，其实放哪都是类似的。设置Repository URL和SSH，如果配置错误的话，界面会一直报错。Submodule的配置，需要勾选上\n`Additional Behaviours`\n![Submodule](Jenkins-iOS持续集成细节记录/yuanma1.png)\n其中第二项的意思是submodule的验证跟主项目一致，我的项目是一致的，可以勾上，若不是的话，需要在想办法，这里没有在深入研究。\n\ncocoapods的话需要在构建中加入shell\n\n```highlight \n export LC_ALL=en_US.UTF-8\n/usr/local/bin/pod install --verbose --no-repo-update \n\n```\n可以先尝试一下构建，如果成功。建议去`工作空间`，找到项目所在的目录,把整个项目复制出来，自己先编译一下，是否能编译过。\n\n注意：\n\n- 源码SSH一定要切换到jenkens账户，否则一直报错，参考[指定Git源代码时提示无权限](https://www.jianshu.com/p/ed0edb93e234)\n- 当时我配置URL clone的方式，怎么都会报错，后来换成SSH就OK了。\n- `export LC_ALL=en_US.UTF-8`这句话得加，否则会报错\n\n## 配置证书和打包选项\n\n配置证书比较繁琐，首先去`Jenkins\nKeychains and Provisioning Profiles Management`上传本机的keychain和Provisioning Profiles，这个网上有教程，可以[参考一下](https://www.jianshu.com/p/70e4335b0bd6),这里介绍的比较详细。Provisioning Profiles拿到的都是UUID的文件名，可以去用xcode打开项目，build settings，搜索profiles，就能找到对应的UUID，上传即可。\n添加完后，再到回到`刚建的任务-设置-构建-增加构建步骤`，新增一个xcode，开始配置xcode。\n\n第一项`General build settings` ：`Development Team ID`这一项，如果不知道从哪里查的话，先用自己的xcode打个包，导出ipa的文件目录中有`ExportOptions.plist`中的`team id`。\n把`Generate Archive?`设置为`YES`,又会多出很多选项，`Output directory`建议是`${WORKSPACE}/Build`,如果不在workspace的话，会报错。\n\n第二项`Code signing & OS X keychain options`：我一开配置好的，然后选`Read from Xcode Project`，一直都是失败，建议不要勾选这个选项。勾选`Manual signing`和`Unlock Keychain?`把该选的选上，`Keychain password`就是本机的登录密码。\n\n第三项`Advanced Xcode build options`：这个也比较简单，如果项目是workspace，直接在`Xcode Workspace File`填上workspace的路径就行了，注意不需要填后缀。但是建议还是把其他选项都填上，其中`Xcode Project Directory`会影响第四项的配置，不填的话，会找不到info.plist，导致无法更改`CFBundleVersion`。\n\n第四项`Versioning `：这一项是用于每次构建，动态变更build number的，一般在`Technical version`填上`${BUILD_ID}`。\n\n\n配置完成后，可以构建一下，看看能不能成功。如果失败的话，可以查看一下原因，或者仿照第一步拉源码，把项目拷出来，用xcodebuild尝试打包，确保自己的项目是可以打包的，再查找Jenkins配置的问题。\n\n\n## 上传ipa\n\n这一部非常简单，我使用的是蒲公英，[使用 Jenkins 实现持续集成 (iOS)](https://www.pgyer.com/doc/view/jenkins_ios),先去Jenkins插件下一个`Upload to pgyer`,再到`刚建的任务-设置-构建-增加构建步骤`，增加一个`Upload to pgyer with api v2`，`pgyer api_key`可以在蒲公英官网找到，`scandir`就是ipa所在的目录，`file wildcard`是指ipa的文件通配符，注意不是文件的全程，如果目录下只有一个ipa，使用`*.ipa`即可。\n\n\n#  结语\n\n每个人的环境和需求都不一样，如果配置过程中出了问题，一定要多看控制台输出，看看哪里报错，报错的原因是什么，错误信息还是比较详细的，一步一步解决。\n","source":"_posts/Jenkins-iOS持续集成细节记录.md","raw":"---\ntitle: Jenkins+iOS持续集成细节记录\ndate: 2019-04-24 15:11:57\ntags:\n\t- Jenkins\n\t- iOS\n\t- 持续集成\n---\n\n\n# 前言\n\niOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。\n\n<!-- more -->\n# 环境介绍\n\n- 系统版本：macOS Mojave 10.14.4 (18E226)\n- Xcode版本：Version 10.1 (10B61)\n- Jenkins版本：Jenkins ver. 2.164.2\n\n我的项目集成了cocoapods和2个Project，其中一个Project用了Git的submodule。\n\n\n# 开始搭建\n\nJenkins下载安装，完成后打开Jenkins的界面，下载一些插件，新建一个空的任务。接下来开始配置，配置我是分三步：1、下载源码 2、配置证书和打包选项 3、上传ipa。\n\n\n## 下载源码\n\n\n源码我使用的是Git，代码放在gitee，其实放哪都是类似的。设置Repository URL和SSH，如果配置错误的话，界面会一直报错。Submodule的配置，需要勾选上\n`Additional Behaviours`\n![Submodule](Jenkins-iOS持续集成细节记录/yuanma1.png)\n其中第二项的意思是submodule的验证跟主项目一致，我的项目是一致的，可以勾上，若不是的话，需要在想办法，这里没有在深入研究。\n\ncocoapods的话需要在构建中加入shell\n\n```highlight \n export LC_ALL=en_US.UTF-8\n/usr/local/bin/pod install --verbose --no-repo-update \n\n```\n可以先尝试一下构建，如果成功。建议去`工作空间`，找到项目所在的目录,把整个项目复制出来，自己先编译一下，是否能编译过。\n\n注意：\n\n- 源码SSH一定要切换到jenkens账户，否则一直报错，参考[指定Git源代码时提示无权限](https://www.jianshu.com/p/ed0edb93e234)\n- 当时我配置URL clone的方式，怎么都会报错，后来换成SSH就OK了。\n- `export LC_ALL=en_US.UTF-8`这句话得加，否则会报错\n\n## 配置证书和打包选项\n\n配置证书比较繁琐，首先去`Jenkins\nKeychains and Provisioning Profiles Management`上传本机的keychain和Provisioning Profiles，这个网上有教程，可以[参考一下](https://www.jianshu.com/p/70e4335b0bd6),这里介绍的比较详细。Provisioning Profiles拿到的都是UUID的文件名，可以去用xcode打开项目，build settings，搜索profiles，就能找到对应的UUID，上传即可。\n添加完后，再到回到`刚建的任务-设置-构建-增加构建步骤`，新增一个xcode，开始配置xcode。\n\n第一项`General build settings` ：`Development Team ID`这一项，如果不知道从哪里查的话，先用自己的xcode打个包，导出ipa的文件目录中有`ExportOptions.plist`中的`team id`。\n把`Generate Archive?`设置为`YES`,又会多出很多选项，`Output directory`建议是`${WORKSPACE}/Build`,如果不在workspace的话，会报错。\n\n第二项`Code signing & OS X keychain options`：我一开配置好的，然后选`Read from Xcode Project`，一直都是失败，建议不要勾选这个选项。勾选`Manual signing`和`Unlock Keychain?`把该选的选上，`Keychain password`就是本机的登录密码。\n\n第三项`Advanced Xcode build options`：这个也比较简单，如果项目是workspace，直接在`Xcode Workspace File`填上workspace的路径就行了，注意不需要填后缀。但是建议还是把其他选项都填上，其中`Xcode Project Directory`会影响第四项的配置，不填的话，会找不到info.plist，导致无法更改`CFBundleVersion`。\n\n第四项`Versioning `：这一项是用于每次构建，动态变更build number的，一般在`Technical version`填上`${BUILD_ID}`。\n\n\n配置完成后，可以构建一下，看看能不能成功。如果失败的话，可以查看一下原因，或者仿照第一步拉源码，把项目拷出来，用xcodebuild尝试打包，确保自己的项目是可以打包的，再查找Jenkins配置的问题。\n\n\n## 上传ipa\n\n这一部非常简单，我使用的是蒲公英，[使用 Jenkins 实现持续集成 (iOS)](https://www.pgyer.com/doc/view/jenkins_ios),先去Jenkins插件下一个`Upload to pgyer`,再到`刚建的任务-设置-构建-增加构建步骤`，增加一个`Upload to pgyer with api v2`，`pgyer api_key`可以在蒲公英官网找到，`scandir`就是ipa所在的目录，`file wildcard`是指ipa的文件通配符，注意不是文件的全程，如果目录下只有一个ipa，使用`*.ipa`即可。\n\n\n#  结语\n\n每个人的环境和需求都不一样，如果配置过程中出了问题，一定要多看控制台输出，看看哪里报错，报错的原因是什么，错误信息还是比较详细的，一步一步解决。\n","slug":"Jenkins-iOS持续集成细节记录","published":1,"updated":"2019-04-24T08:56:34.766Z","_id":"cjuuz8d780002kl2crlkjm5yk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。</p>\n<a id=\"more\"></a>\n<h1 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h1><ul>\n<li>系统版本：macOS Mojave 10.14.4 (18E226)</li>\n<li>Xcode版本：Version 10.1 (10B61)</li>\n<li>Jenkins版本：Jenkins ver. 2.164.2</li>\n</ul>\n<p>我的项目集成了cocoapods和2个Project，其中一个Project用了Git的submodule。</p>\n<h1 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h1><p>Jenkins下载安装，完成后打开Jenkins的界面，下载一些插件，新建一个空的任务。接下来开始配置，配置我是分三步：1、下载源码 2、配置证书和打包选项 3、上传ipa。</p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>源码我使用的是Git，代码放在gitee，其实放哪都是类似的。设置Repository URL和SSH，如果配置错误的话，界面会一直报错。Submodule的配置，需要勾选上<br><code>Additional Behaviours</code><br><img src=\"/2019/04/24/Jenkins-iOS持续集成细节记录/yuanma1.png\" alt=\"Submodule\"><br>其中第二项的意思是submodule的验证跟主项目一致，我的项目是一致的，可以勾上，若不是的话，需要在想办法，这里没有在深入研究。</p>\n<p>cocoapods的话需要在构建中加入shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">/usr/local/bin/pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure>\n<p>可以先尝试一下构建，如果成功。建议去<code>工作空间</code>，找到项目所在的目录,把整个项目复制出来，自己先编译一下，是否能编译过。</p>\n<p>注意：</p>\n<ul>\n<li>源码SSH一定要切换到jenkens账户，否则一直报错，参考<a href=\"https://www.jianshu.com/p/ed0edb93e234\" target=\"_blank\" rel=\"noopener\">指定Git源代码时提示无权限</a></li>\n<li>当时我配置URL clone的方式，怎么都会报错，后来换成SSH就OK了。</li>\n<li><code>export LC_ALL=en_US.UTF-8</code>这句话得加，否则会报错</li>\n</ul>\n<h2 id=\"配置证书和打包选项\"><a href=\"#配置证书和打包选项\" class=\"headerlink\" title=\"配置证书和打包选项\"></a>配置证书和打包选项</h2><p>配置证书比较繁琐，首先去<code>Jenkins\nKeychains and Provisioning Profiles Management</code>上传本机的keychain和Provisioning Profiles，这个网上有教程，可以<a href=\"https://www.jianshu.com/p/70e4335b0bd6\" target=\"_blank\" rel=\"noopener\">参考一下</a>,这里介绍的比较详细。Provisioning Profiles拿到的都是UUID的文件名，可以去用xcode打开项目，build settings，搜索profiles，就能找到对应的UUID，上传即可。<br>添加完后，再到回到<code>刚建的任务-设置-构建-增加构建步骤</code>，新增一个xcode，开始配置xcode。</p>\n<p>第一项<code>General build settings</code> ：<code>Development Team ID</code>这一项，如果不知道从哪里查的话，先用自己的xcode打个包，导出ipa的文件目录中有<code>ExportOptions.plist</code>中的<code>team id</code>。<br>把<code>Generate Archive?</code>设置为<code>YES</code>,又会多出很多选项，<code>Output directory</code>建议是<code>${WORKSPACE}/Build</code>,如果不在workspace的话，会报错。</p>\n<p>第二项<code>Code signing &amp; OS X keychain options</code>：我一开配置好的，然后选<code>Read from Xcode Project</code>，一直都是失败，建议不要勾选这个选项。勾选<code>Manual signing</code>和<code>Unlock Keychain?</code>把该选的选上，<code>Keychain password</code>就是本机的登录密码。</p>\n<p>第三项<code>Advanced Xcode build options</code>：这个也比较简单，如果项目是workspace，直接在<code>Xcode Workspace File</code>填上workspace的路径就行了，注意不需要填后缀。但是建议还是把其他选项都填上，其中<code>Xcode Project Directory</code>会影响第四项的配置，不填的话，会找不到info.plist，导致无法更改<code>CFBundleVersion</code>。</p>\n<p>第四项<code>Versioning</code>：这一项是用于每次构建，动态变更build number的，一般在<code>Technical version</code>填上<code>${BUILD_ID}</code>。</p>\n<p>配置完成后，可以构建一下，看看能不能成功。如果失败的话，可以查看一下原因，或者仿照第一步拉源码，把项目拷出来，用xcodebuild尝试打包，确保自己的项目是可以打包的，再查找Jenkins配置的问题。</p>\n<h2 id=\"上传ipa\"><a href=\"#上传ipa\" class=\"headerlink\" title=\"上传ipa\"></a>上传ipa</h2><p>这一部非常简单，我使用的是蒲公英，<a href=\"https://www.pgyer.com/doc/view/jenkins_ios\" target=\"_blank\" rel=\"noopener\">使用 Jenkins 实现持续集成 (iOS)</a>,先去Jenkins插件下一个<code>Upload to pgyer</code>,再到<code>刚建的任务-设置-构建-增加构建步骤</code>，增加一个<code>Upload to pgyer with api v2</code>，<code>pgyer api_key</code>可以在蒲公英官网找到，<code>scandir</code>就是ipa所在的目录，<code>file wildcard</code>是指ipa的文件通配符，注意不是文件的全程，如果目录下只有一个ipa，使用<code>*.ipa</code>即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>每个人的环境和需求都不一样，如果配置过程中出了问题，一定要多看控制台输出，看看哪里报错，报错的原因是什么，错误信息还是比较详细的，一步一步解决。</p>\n","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。</p>","more":"<h1 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h1><ul>\n<li>系统版本：macOS Mojave 10.14.4 (18E226)</li>\n<li>Xcode版本：Version 10.1 (10B61)</li>\n<li>Jenkins版本：Jenkins ver. 2.164.2</li>\n</ul>\n<p>我的项目集成了cocoapods和2个Project，其中一个Project用了Git的submodule。</p>\n<h1 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h1><p>Jenkins下载安装，完成后打开Jenkins的界面，下载一些插件，新建一个空的任务。接下来开始配置，配置我是分三步：1、下载源码 2、配置证书和打包选项 3、上传ipa。</p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>源码我使用的是Git，代码放在gitee，其实放哪都是类似的。设置Repository URL和SSH，如果配置错误的话，界面会一直报错。Submodule的配置，需要勾选上<br><code>Additional Behaviours</code><br><img src=\"/2019/04/24/Jenkins-iOS持续集成细节记录/yuanma1.png\" alt=\"Submodule\"><br>其中第二项的意思是submodule的验证跟主项目一致，我的项目是一致的，可以勾上，若不是的话，需要在想办法，这里没有在深入研究。</p>\n<p>cocoapods的话需要在构建中加入shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">/usr/local/bin/pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure>\n<p>可以先尝试一下构建，如果成功。建议去<code>工作空间</code>，找到项目所在的目录,把整个项目复制出来，自己先编译一下，是否能编译过。</p>\n<p>注意：</p>\n<ul>\n<li>源码SSH一定要切换到jenkens账户，否则一直报错，参考<a href=\"https://www.jianshu.com/p/ed0edb93e234\" target=\"_blank\" rel=\"noopener\">指定Git源代码时提示无权限</a></li>\n<li>当时我配置URL clone的方式，怎么都会报错，后来换成SSH就OK了。</li>\n<li><code>export LC_ALL=en_US.UTF-8</code>这句话得加，否则会报错</li>\n</ul>\n<h2 id=\"配置证书和打包选项\"><a href=\"#配置证书和打包选项\" class=\"headerlink\" title=\"配置证书和打包选项\"></a>配置证书和打包选项</h2><p>配置证书比较繁琐，首先去<code>Jenkins\nKeychains and Provisioning Profiles Management</code>上传本机的keychain和Provisioning Profiles，这个网上有教程，可以<a href=\"https://www.jianshu.com/p/70e4335b0bd6\" target=\"_blank\" rel=\"noopener\">参考一下</a>,这里介绍的比较详细。Provisioning Profiles拿到的都是UUID的文件名，可以去用xcode打开项目，build settings，搜索profiles，就能找到对应的UUID，上传即可。<br>添加完后，再到回到<code>刚建的任务-设置-构建-增加构建步骤</code>，新增一个xcode，开始配置xcode。</p>\n<p>第一项<code>General build settings</code> ：<code>Development Team ID</code>这一项，如果不知道从哪里查的话，先用自己的xcode打个包，导出ipa的文件目录中有<code>ExportOptions.plist</code>中的<code>team id</code>。<br>把<code>Generate Archive?</code>设置为<code>YES</code>,又会多出很多选项，<code>Output directory</code>建议是<code>${WORKSPACE}/Build</code>,如果不在workspace的话，会报错。</p>\n<p>第二项<code>Code signing &amp; OS X keychain options</code>：我一开配置好的，然后选<code>Read from Xcode Project</code>，一直都是失败，建议不要勾选这个选项。勾选<code>Manual signing</code>和<code>Unlock Keychain?</code>把该选的选上，<code>Keychain password</code>就是本机的登录密码。</p>\n<p>第三项<code>Advanced Xcode build options</code>：这个也比较简单，如果项目是workspace，直接在<code>Xcode Workspace File</code>填上workspace的路径就行了，注意不需要填后缀。但是建议还是把其他选项都填上，其中<code>Xcode Project Directory</code>会影响第四项的配置，不填的话，会找不到info.plist，导致无法更改<code>CFBundleVersion</code>。</p>\n<p>第四项<code>Versioning</code>：这一项是用于每次构建，动态变更build number的，一般在<code>Technical version</code>填上<code>${BUILD_ID}</code>。</p>\n<p>配置完成后，可以构建一下，看看能不能成功。如果失败的话，可以查看一下原因，或者仿照第一步拉源码，把项目拷出来，用xcodebuild尝试打包，确保自己的项目是可以打包的，再查找Jenkins配置的问题。</p>\n<h2 id=\"上传ipa\"><a href=\"#上传ipa\" class=\"headerlink\" title=\"上传ipa\"></a>上传ipa</h2><p>这一部非常简单，我使用的是蒲公英，<a href=\"https://www.pgyer.com/doc/view/jenkins_ios\" target=\"_blank\" rel=\"noopener\">使用 Jenkins 实现持续集成 (iOS)</a>,先去Jenkins插件下一个<code>Upload to pgyer</code>,再到<code>刚建的任务-设置-构建-增加构建步骤</code>，增加一个<code>Upload to pgyer with api v2</code>，<code>pgyer api_key</code>可以在蒲公英官网找到，<code>scandir</code>就是ipa所在的目录，<code>file wildcard</code>是指ipa的文件通配符，注意不是文件的全程，如果目录下只有一个ipa，使用<code>*.ipa</code>即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>每个人的环境和需求都不一样，如果配置过程中出了问题，一定要多看控制台输出，看看哪里报错，报错的原因是什么，错误信息还是比较详细的，一步一步解决。</p>"},{"title":"VSCode中Flow报错解决","date":"2019-03-20T06:10:47.000Z","_content":"\n# 前言\n最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！\n<!-- more -->\n# 问题\n在用到带参数的指定类型的方法时，比如`_onPressItem = (id: string) => `，VSCode会报错`[js] 'types' can only be used in a .ts file`。\n![测试图片](VSCode中Flow报错解决/problem1.png)\n虽然不影响程序的运行，但是这个正确的写法，报什么错呢？\n\n# 解决\n这个问题其实归结于是VSCode使用Flow的bug，在VSCode的issue里，开发者建议我们使用一个叫[Flow Language Support](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode)的插件，使用后发现并没有解决，还会报Flow版本不匹配的错误，遂放弃，继续寻找到一个新的插件[vscode-flow-ide\n](https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide#overview),但是安装完成后，发现错误还在。\n\n在Stack Overflow和各种issue中寻找了很久，一般都是给两条路子：\n\n1 安装插件，例如`Flow Language Support`，`vscode-flow-ide`推荐后者。\n2 在VSCode中设置\n\n```highlight\n\"typescri.validate.enable\": false,\n\"javascript.validate.enable\": false,\n```\nPS：像我这种小白根本找不到VSCode中哪里能设置这个，大家都没写，搜了半天，最后在`Code->Preferences->Settings`中搜索，才找到`settings.json`这个文件，路径是`/Users/你的计算机名/Library/Application Support/Code/User/settings.jsonpt`。\n\n\n最后尝试后，我是两条都用了，才解决,希望能帮到你们。\n\n# 参考资料\n[1] [Flow - JS静态类型检查工具](https://segmentfault.com/a/1190000008088489)\n\n[2][jstwister/vscode-flow-ide](https://github.com/jstwister/vscode-flow-ide)\n\n[3][How to disable TypeScript warnings in VSCode?\n](https://stackoverflow.com/questions/42632215/how-to-disable-typescript-warnings-in-vscode/42633555#42633555)","source":"_posts/VSCode中Flow报错解决.md","raw":"---\ntitle: VSCode中Flow报错解决\ndate: 2019-03-20 14:10:47\ntags:\n\t- VSCode\n\t- ReactNative\n\t- Flow\n---\n\n# 前言\n最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！\n<!-- more -->\n# 问题\n在用到带参数的指定类型的方法时，比如`_onPressItem = (id: string) => `，VSCode会报错`[js] 'types' can only be used in a .ts file`。\n![测试图片](VSCode中Flow报错解决/problem1.png)\n虽然不影响程序的运行，但是这个正确的写法，报什么错呢？\n\n# 解决\n这个问题其实归结于是VSCode使用Flow的bug，在VSCode的issue里，开发者建议我们使用一个叫[Flow Language Support](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode)的插件，使用后发现并没有解决，还会报Flow版本不匹配的错误，遂放弃，继续寻找到一个新的插件[vscode-flow-ide\n](https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide#overview),但是安装完成后，发现错误还在。\n\n在Stack Overflow和各种issue中寻找了很久，一般都是给两条路子：\n\n1 安装插件，例如`Flow Language Support`，`vscode-flow-ide`推荐后者。\n2 在VSCode中设置\n\n```highlight\n\"typescri.validate.enable\": false,\n\"javascript.validate.enable\": false,\n```\nPS：像我这种小白根本找不到VSCode中哪里能设置这个，大家都没写，搜了半天，最后在`Code->Preferences->Settings`中搜索，才找到`settings.json`这个文件，路径是`/Users/你的计算机名/Library/Application Support/Code/User/settings.jsonpt`。\n\n\n最后尝试后，我是两条都用了，才解决,希望能帮到你们。\n\n# 参考资料\n[1] [Flow - JS静态类型检查工具](https://segmentfault.com/a/1190000008088489)\n\n[2][jstwister/vscode-flow-ide](https://github.com/jstwister/vscode-flow-ide)\n\n[3][How to disable TypeScript warnings in VSCode?\n](https://stackoverflow.com/questions/42632215/how-to-disable-typescript-warnings-in-vscode/42633555#42633555)","slug":"VSCode中Flow报错解决","published":1,"updated":"2019-04-24T07:05:17.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuuz8d7e0005kl2c1jn6701s","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！<br><a id=\"more\"></a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在用到带参数的指定类型的方法时，比如<code>_onPressItem = (id: string) =&gt;</code>，VSCode会报错<code>[js] &#39;types&#39; can only be used in a .ts file</code>。<br><img src=\"/2019/03/20/VSCode中Flow报错解决/problem1.png\" alt=\"测试图片\"><br>虽然不影响程序的运行，但是这个正确的写法，报什么错呢？</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>这个问题其实归结于是VSCode使用Flow的bug，在VSCode的issue里，开发者建议我们使用一个叫<a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\" target=\"_blank\" rel=\"noopener\">Flow Language Support</a>的插件，使用后发现并没有解决，还会报Flow版本不匹配的错误，遂放弃，继续寻找到一个新的插件<a href=\"https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide#overview\" target=\"_blank\" rel=\"noopener\">vscode-flow-ide\n</a>,但是安装完成后，发现错误还在。</p>\n<p>在Stack Overflow和各种issue中寻找了很久，一般都是给两条路子：</p>\n<p>1 安装插件，例如<code>Flow Language Support</code>，<code>vscode-flow-ide</code>推荐后者。<br>2 在VSCode中设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;typescri.validate.enable&quot;: false,</span><br><span class=\"line\">&quot;javascript.validate.enable&quot;: false,</span><br></pre></td></tr></table></figure>\n<p>PS：像我这种小白根本找不到VSCode中哪里能设置这个，大家都没写，搜了半天，最后在<code>Code-&gt;Preferences-&gt;Settings</code>中搜索，才找到<code>settings.json</code>这个文件，路径是<code>/Users/你的计算机名/Library/Application Support/Code/User/settings.jsonpt</code>。</p>\n<p>最后尝试后，我是两条都用了，才解决,希望能帮到你们。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://segmentfault.com/a/1190000008088489\" target=\"_blank\" rel=\"noopener\">Flow - JS静态类型检查工具</a></p>\n<p>[2]<a href=\"https://github.com/jstwister/vscode-flow-ide\" target=\"_blank\" rel=\"noopener\">jstwister/vscode-flow-ide</a></p>\n<p>[3]<a href=\"https://stackoverflow.com/questions/42632215/how-to-disable-typescript-warnings-in-vscode/42633555#42633555\" target=\"_blank\" rel=\"noopener\">How to disable TypeScript warnings in VSCode?\n</a></p>\n","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/mw690/87e5d70ajw8ew9bm9ee6cj20kv0kxq4e.jpg","name":"Yarn_zyk","tag":"iOS","desc":"努力学习的小菜鸟","skills":{"Objective-C":8,"Swift":6,"invisible-split-line-1":-1,"Xcode":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":[null]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"https://weibo.com/u/2279986954","github":"https://github.com/taozidada","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址":"https://github.com/taozidada"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":" Effective Objective-C 2.0","cover":"https://img1.doubanio.com/view/subject/l/public/s27552168.jpg","review":"编写高质量iOS与OS X代码的52个有效方法","score":"7","doubanLink":"https://book.douban.com/subject/25829244/"}],"reading":[{"title":"Objective-C 高级编程：iOS与OS X多线程和内存管理","cover":"","review":"","score":7,"doubanLink":"https://www.douban.com/note/279361686/"}],"wanted":[{"title":"算法","cover":"https://img1.doubanio.com/view/subject/l/public/s8938479.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/10432347/"}]}}}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！<br></p>","more":"<p></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在用到带参数的指定类型的方法时，比如<code>_onPressItem = (id: string) =&gt;</code>，VSCode会报错<code>[js] &#39;types&#39; can only be used in a .ts file</code>。<br><img src=\"/2019/03/20/VSCode中Flow报错解决/problem1.png\" alt=\"测试图片\"><br>虽然不影响程序的运行，但是这个正确的写法，报什么错呢？</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>这个问题其实归结于是VSCode使用Flow的bug，在VSCode的issue里，开发者建议我们使用一个叫<a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\" target=\"_blank\" rel=\"noopener\">Flow Language Support</a>的插件，使用后发现并没有解决，还会报Flow版本不匹配的错误，遂放弃，继续寻找到一个新的插件<a href=\"https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide#overview\" target=\"_blank\" rel=\"noopener\">vscode-flow-ide\n</a>,但是安装完成后，发现错误还在。</p>\n<p>在Stack Overflow和各种issue中寻找了很久，一般都是给两条路子：</p>\n<p>1 安装插件，例如<code>Flow Language Support</code>，<code>vscode-flow-ide</code>推荐后者。<br>2 在VSCode中设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;typescri.validate.enable&quot;: false,</span><br><span class=\"line\">&quot;javascript.validate.enable&quot;: false,</span><br></pre></td></tr></table></figure>\n<p>PS：像我这种小白根本找不到VSCode中哪里能设置这个，大家都没写，搜了半天，最后在<code>Code-&gt;Preferences-&gt;Settings</code>中搜索，才找到<code>settings.json</code>这个文件，路径是<code>/Users/你的计算机名/Library/Application Support/Code/User/settings.jsonpt</code>。</p>\n<p>最后尝试后，我是两条都用了，才解决,希望能帮到你们。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"https://segmentfault.com/a/1190000008088489\" target=\"_blank\" rel=\"noopener\">Flow - JS静态类型检查工具</a></p>\n<p>[2]<a href=\"https://github.com/jstwister/vscode-flow-ide\" target=\"_blank\" rel=\"noopener\">jstwister/vscode-flow-ide</a></p>\n<p>[3]<a href=\"https://stackoverflow.com/questions/42632215/how-to-disable-typescript-warnings-in-vscode/42633555#42633555\" target=\"_blank\" rel=\"noopener\">How to disable TypeScript warnings in VSCode?\n</a></p>"}],"PostAsset":[{"_id":"source/_posts/Hexo+github Pages博客搭建/title1.png","slug":"title1.png","post":"cjuuz8d710000kl2cmgkmy5tc","modified":0,"renderable":0},{"_id":"source/_posts/Jenkins-iOS持续集成细节记录/yuanma1.png","slug":"yuanma1.png","post":"cjuuz8d780002kl2crlkjm5yk","modified":0,"renderable":0},{"_id":"source/_posts/VSCode中Flow报错解决/problem1.png","slug":"problem1.png","post":"cjuuz8d7e0005kl2c1jn6701s","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjuuz8d710000kl2cmgkmy5tc","tag_id":"cjuuz8d7c0004kl2ckczqupu1","_id":"cjuuz8d7h0007kl2c6a7aqjvs"},{"post_id":"cjuuz8d780002kl2crlkjm5yk","tag_id":"cjuuz8d7g0006kl2c5f9tihtr","_id":"cjuuz8d7m000bkl2c29lv4d9q"},{"post_id":"cjuuz8d780002kl2crlkjm5yk","tag_id":"cjuuz8d7i0008kl2c6p4929kw","_id":"cjuuz8d7m000ckl2c19tl9ng3"},{"post_id":"cjuuz8d780002kl2crlkjm5yk","tag_id":"cjuuz8d7k0009kl2cdkbxvde5","_id":"cjuuz8d7n000ekl2cet3mhcs4"},{"post_id":"cjuuz8d7e0005kl2c1jn6701s","tag_id":"cjuuz8d7m000akl2c49odod6x","_id":"cjuuz8d7o000gkl2cwj8th7yr"},{"post_id":"cjuuz8d7e0005kl2c1jn6701s","tag_id":"cjuuz8d7n000dkl2c1p1rugta","_id":"cjuuz8d7p000hkl2c8ypkbjea"},{"post_id":"cjuuz8d7e0005kl2c1jn6701s","tag_id":"cjuuz8d7o000fkl2cqfwfe9dk","_id":"cjuuz8d7p000ikl2cbyy0jig1"}],"Tag":[{"name":"博客","_id":"cjuuz8d7c0004kl2ckczqupu1"},{"name":"Jenkins","_id":"cjuuz8d7g0006kl2c5f9tihtr"},{"name":"iOS","_id":"cjuuz8d7i0008kl2c6p4929kw"},{"name":"持续集成","_id":"cjuuz8d7k0009kl2cdkbxvde5"},{"name":"VSCode","_id":"cjuuz8d7m000akl2c49odod6x"},{"name":"ReactNative","_id":"cjuuz8d7n000dkl2c1p1rugta"},{"name":"Flow","_id":"cjuuz8d7o000fkl2cqfwfe9dk"}]}}