<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yarn_zyk的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-24T08:56:34.766Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins+iOS持续集成细节记录</title>
    <link href="http://yoursite.com/2019/04/24/Jenkins-iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/04/24/Jenkins-iOS持续集成细节记录/</id>
    <published>2019-04-24T07:11:57.000Z</published>
    <updated>2019-04-24T08:56:34.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。</p><a id="more"></a><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><ul><li>系统版本：macOS Mojave 10.14.4 (18E226)</li><li>Xcode版本：Version 10.1 (10B61)</li><li>Jenkins版本：Jenkins ver. 2.164.2</li></ul><p>我的项目集成了cocoapods和2个Project，其中一个Project用了Git的submodule。</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><p>Jenkins下载安装，完成后打开Jenkins的界面，下载一些插件，新建一个空的任务。接下来开始配置，配置我是分三步：1、下载源码 2、配置证书和打包选项 3、上传ipa。</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>源码我使用的是Git，代码放在gitee，其实放哪都是类似的。设置Repository URL和SSH，如果配置错误的话，界面会一直报错。Submodule的配置，需要勾选上<br><code>Additional Behaviours</code><br><img src="/2019/04/24/Jenkins-iOS持续集成细节记录/yuanma1.png" alt="Submodule"><br>其中第二项的意思是submodule的验证跟主项目一致，我的项目是一致的，可以勾上，若不是的话，需要在想办法，这里没有在深入研究。</p><p>cocoapods的话需要在构建中加入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> export LC_ALL=en_US.UTF-8</span><br><span class="line">/usr/local/bin/pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure><p>可以先尝试一下构建，如果成功。建议去<code>工作空间</code>，找到项目所在的目录,把整个项目复制出来，自己先编译一下，是否能编译过。</p><p>注意：</p><ul><li>源码SSH一定要切换到jenkens账户，否则一直报错，参考<a href="https://www.jianshu.com/p/ed0edb93e234" target="_blank" rel="noopener">指定Git源代码时提示无权限</a></li><li>当时我配置URL clone的方式，怎么都会报错，后来换成SSH就OK了。</li><li><code>export LC_ALL=en_US.UTF-8</code>这句话得加，否则会报错</li></ul><h2 id="配置证书和打包选项"><a href="#配置证书和打包选项" class="headerlink" title="配置证书和打包选项"></a>配置证书和打包选项</h2><p>配置证书比较繁琐，首先去<code>JenkinsKeychains and Provisioning Profiles Management</code>上传本机的keychain和Provisioning Profiles，这个网上有教程，可以<a href="https://www.jianshu.com/p/70e4335b0bd6" target="_blank" rel="noopener">参考一下</a>,这里介绍的比较详细。Provisioning Profiles拿到的都是UUID的文件名，可以去用xcode打开项目，build settings，搜索profiles，就能找到对应的UUID，上传即可。<br>添加完后，再到回到<code>刚建的任务-设置-构建-增加构建步骤</code>，新增一个xcode，开始配置xcode。</p><p>第一项<code>General build settings</code> ：<code>Development Team ID</code>这一项，如果不知道从哪里查的话，先用自己的xcode打个包，导出ipa的文件目录中有<code>ExportOptions.plist</code>中的<code>team id</code>。<br>把<code>Generate Archive?</code>设置为<code>YES</code>,又会多出很多选项，<code>Output directory</code>建议是<code>${WORKSPACE}/Build</code>,如果不在workspace的话，会报错。</p><p>第二项<code>Code signing &amp; OS X keychain options</code>：我一开配置好的，然后选<code>Read from Xcode Project</code>，一直都是失败，建议不要勾选这个选项。勾选<code>Manual signing</code>和<code>Unlock Keychain?</code>把该选的选上，<code>Keychain password</code>就是本机的登录密码。</p><p>第三项<code>Advanced Xcode build options</code>：这个也比较简单，如果项目是workspace，直接在<code>Xcode Workspace File</code>填上workspace的路径就行了，注意不需要填后缀。但是建议还是把其他选项都填上，其中<code>Xcode Project Directory</code>会影响第四项的配置，不填的话，会找不到info.plist，导致无法更改<code>CFBundleVersion</code>。</p><p>第四项<code>Versioning</code>：这一项是用于每次构建，动态变更build number的，一般在<code>Technical version</code>填上<code>${BUILD_ID}</code>。</p><p>配置完成后，可以构建一下，看看能不能成功。如果失败的话，可以查看一下原因，或者仿照第一步拉源码，把项目拷出来，用xcodebuild尝试打包，确保自己的项目是可以打包的，再查找Jenkins配置的问题。</p><h2 id="上传ipa"><a href="#上传ipa" class="headerlink" title="上传ipa"></a>上传ipa</h2><p>这一部非常简单，我使用的是蒲公英，<a href="https://www.pgyer.com/doc/view/jenkins_ios" target="_blank" rel="noopener">使用 Jenkins 实现持续集成 (iOS)</a>,先去Jenkins插件下一个<code>Upload to pgyer</code>,再到<code>刚建的任务-设置-构建-增加构建步骤</code>，增加一个<code>Upload to pgyer with api v2</code>，<code>pgyer api_key</code>可以在蒲公英官网找到，<code>scandir</code>就是ipa所在的目录，<code>file wildcard</code>是指ipa的文件通配符，注意不是文件的全程，如果目录下只有一个ipa，使用<code>*.ipa</code>即可。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>每个人的环境和需求都不一样，如果配置过程中出了问题，一定要多看控制台输出，看看哪里报错，报错的原因是什么，错误信息还是比较详细的，一步一步解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS持续集成采用Jenkins已经是一个非常成熟的方案了，以前公司用过，自己还没尝试搭建过，这次尝试了一下，踩了很多坑，网上的很多文章都是早些年的，都9102年了，Jenkins也有了很多变化，Xcode也是10.x版本了。我分享一下我个人觉得要注意的细节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>VSCode中Flow报错解决</title>
    <link href="http://yoursite.com/2019/03/20/VSCode%E4%B8%ADFlow%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/03/20/VSCode中Flow报错解决/</id>
    <published>2019-03-20T06:10:47.000Z</published>
    <updated>2019-04-24T07:05:17.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在用到带参数的指定类型的方法时，比如<code>_onPressItem = (id: string) =&gt;</code>，VSCode会报错<code>[js] &#39;types&#39; can only be used in a .ts file</code>。<br><img src="/2019/03/20/VSCode中Flow报错解决/problem1.png" alt="测试图片"><br>虽然不影响程序的运行，但是这个正确的写法，报什么错呢？</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>这个问题其实归结于是VSCode使用Flow的bug，在VSCode的issue里，开发者建议我们使用一个叫<a href="https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode" target="_blank" rel="noopener">Flow Language Support</a>的插件，使用后发现并没有解决，还会报Flow版本不匹配的错误，遂放弃，继续寻找到一个新的插件<a href="https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide#overview" target="_blank" rel="noopener">vscode-flow-ide</a>,但是安装完成后，发现错误还在。</p><p>在Stack Overflow和各种issue中寻找了很久，一般都是给两条路子：</p><p>1 安装插件，例如<code>Flow Language Support</code>，<code>vscode-flow-ide</code>推荐后者。<br>2 在VSCode中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;typescri.validate.enable&quot;: false,</span><br><span class="line">&quot;javascript.validate.enable&quot;: false,</span><br></pre></td></tr></table></figure><p>PS：像我这种小白根本找不到VSCode中哪里能设置这个，大家都没写，搜了半天，最后在<code>Code-&gt;Preferences-&gt;Settings</code>中搜索，才找到<code>settings.json</code>这个文件，路径是<code>/Users/你的计算机名/Library/Application Support/Code/User/settings.jsonpt</code>。</p><p>最后尝试后，我是两条都用了，才解决,希望能帮到你们。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://segmentfault.com/a/1190000008088489" target="_blank" rel="noopener">Flow - JS静态类型检查工具</a></p><p>[2]<a href="https://github.com/jstwister/vscode-flow-ide" target="_blank" rel="noopener">jstwister/vscode-flow-ide</a></p><p>[3]<a href="https://stackoverflow.com/questions/42632215/how-to-disable-typescript-warnings-in-vscode/42633555#42633555" target="_blank" rel="noopener">How to disable TypeScript warnings in VSCode?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习RN的使用，实在受不了webstorm的性能，IDE换成了VS Code，对于我这种渣渣电脑，至少用起来不卡了，还有很多插件，非常方便，好评！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="http://yoursite.com/tags/VSCode/"/>
    
      <category term="ReactNative" scheme="http://yoursite.com/tags/ReactNative/"/>
    
      <category term="Flow" scheme="http://yoursite.com/tags/Flow/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Pages博客搭建</title>
    <link href="http://yoursite.com/2018/04/11/Hexo+github%20Pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/04/11/Hexo+github Pages博客搭建/</id>
    <published>2018-04-11T07:21:09.000Z</published>
    <updated>2019-04-24T07:05:17.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。<br><a id="more"></a></p><h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><p>网上有各种各样的搭建个人博客的方式，最初我是选则GitHub Pages + Jekyll的方案，后来搜了一下Jekyll的主题，感觉不是很美丽（如想使用Jekyll可以参考<a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">一步步在GitHub上创建博客主页</a> 。最终选择了Hexo + GitHub Pages的方案，而且不需要购买域名，可以说是零成本。</p><h1 id="关于GitHub-Pages"><a href="#关于GitHub-Pages" class="headerlink" title="关于GitHub Pages"></a>关于GitHub Pages</h1><p><a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a> 是GitHub推出的一个服务，非常适合搭建博客。主要考虑以下几个优点：</p><ul><li>提供300M免费存储空间（相当于一个免费的服务器，而且是没有流量限制）</li><li>提供域名usernmae.github.io（免费的域名，不足之处就是可能国内访问速度不怎么快）</li><li>有Hexo和Jekyll等博客框架的支持（有很多热心的开发者贡献了较多的主题，可以随意挑选）</li></ul><blockquote><p>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to <a href="http://you.github.com" target="_blank" rel="noopener">http://you.github.com</a>. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!</p></blockquote><p>GitHub Pages也非常乐意，大家在上面搭建博客。</p><p>首先，你要有一个GitHub的账户，建立一个<code>yourusername.github.io</code>的仓库，这个操作对经常使用GitHub的人来说不算难事，这里不详细介绍了，如果不会的话可以百度或者参考<a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">这里</a>。创建完成后，就可以进行下一步了。</p><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>Hexo环境搭建，会依赖较多的工具。安装的过程也会出现各种各样的错误，根据错误在网上搜一下，见招拆招，基本能顺利解决问题。</p><h2 id="安装RVM和Ruby"><a href="#安装RVM和Ruby" class="headerlink" title="安装RVM和Ruby"></a>安装RVM和Ruby</h2><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ \curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">$ source ~/.bashrc</span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>列出已知的 Ruby 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure><p>安装一个 Ruby 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 2.2.0 --disable-binary</span><br></pre></td></tr></table></figure><p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。</p><p>切换 Ruby 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.2.0</span><br></pre></td></tr></table></figure><p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.2.0 --default</span><br></pre></td></tr></table></figure><p>查询已经安装的ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure><p>卸载一个已安装版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm remove 1.8.7</span><br></pre></td></tr></table></figure><p>RVM的安装主要是为了控制Ruby的版本，我此次使用的Ruby版本是最新的2.4.1，如果安装遇到困难的可以查看<a href="https://ruby-china.org/wiki/rvm-guide" target="_blank" rel="noopener">这里</a>。</p><h2 id="安装Node和npm"><a href="#安装Node和npm" class="headerlink" title="安装Node和npm"></a>安装Node和npm</h2><p>在安装Ruby过程中，系统会自动安装Homebrew，因此直接可以用Homebrew来安装Node。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>执行以下命令查看是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>的安装很简单，官方网站给出的安装方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>这样Hexo的环境已经搭建完成，并且blog这个文件夹就是一个简单的demo。执行过<code>hexo server</code>后就能用浏览器通过<code>http://localhost:4000/</code>来访问自己的博客页了。</p><h1 id="撰写博文"><a href="#撰写博文" class="headerlink" title="撰写博文"></a>撰写博文</h1><h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><p>完成以上步骤之后，可以预览到自己的博客效果了，接下来我比较关心的是如何新建文章。新建文章有个要注意的地方是，不能直接把普通.md拖进<code>_post</code>目录下，是会报错的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-test    # 格式是： hexo new ｛文章名｝</span><br></pre></td></tr></table></figure><p>需要通过命令来创建新的文章,打开新建的<code>hello-test.md</code></p><p><img src="/2018/04/11/Hexo+github Pages博客搭建/title1.png" alt="测试图片"></p><p>在blog的根目录下，<code>_config.yml</code>文件比较重要，主要是对Hexo的配置以及站点的相关配置。</p><h2 id="博文图片"><a href="#博文图片" class="headerlink" title="博文图片"></a>博文图片</h2><p>关于博文图片，网上很多例子都是推荐七牛云，通过贴链接的方式，把图片加在博文中。我这里推荐将图片放在本地。</p><p>1 把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p><p>2 在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p><p>3 等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;来生成md博文时，/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p><p>4 最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p><p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><p>最后自己验证一下能否正确加载即可。</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo的主题相当于是博客的模板，在Hexo官网的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>中，找到很多模板，可以选择喜欢的进行fork。有些还有中文文档，对英文不是很好的人（比如我）来说很友好。</p><p>我这边使用的是<a href="http://tutuge.me" target="_blank" rel="noopener">tutuge</a>博客应用的Hexo主题<a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="noopener">raytaylorism</a>。主题配置是中文文档，非常简单，大家按照步骤基本可以配置完成。</p><h1 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h1><p>在之前，已经建立了一个<code>yourusername.github.io</code>的仓库了，接下来要通过远程部署来完成用<code>https://yourusername.github.io</code> 直接访问你的博客。</p><p>现在我们需要_config.yml文件，来建立关联，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>翻到最下面，改成我这样子的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">type: git</span><br><span class="line"></span><br><span class="line"> repo: https://github.com/yourusername.github.io/yourusername.github.io.github.io.git</span><br><span class="line"></span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p>然后执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>就可以把自己的博客部署到GitHub Pages了，这个操作是有延迟的，一般要等几分钟才能通过<code>https://yourusername.github.io</code>访问查看到效果，不能太心急。</p><p>如果配置过程中遇到SSH Key的问题，请参考网上的<a href="https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&amp;fps=1" target="_blank" rel="noopener">教程</a>。</p><p>自己的博客源码，可以再建一个Github仓库用来管理，<code>yourusername.github.io</code>只能用来部署自己的博客。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用Hexo + GitHub Pages搭建个人博客可以说是简单快捷，0成本，本文也没有写的特别详细，一些简单的坑通过搜索还是可以快速解决的。这也是我搭建完个人博客后的第一篇文章，不足之处，希望大家多多指点。</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><p>[1] <a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">一步步在GitHub上创建博客主页</a></p><p>[2]<a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a></p><p>[3]<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a></p><p>[4]<a href="https://ruby-china.org/wiki/rvm-guide" target="_blank" rel="noopener">RVM安装手册</a></p><p>[5]<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a></p><p>[6]<a href="http://tutuge.me" target="_blank" rel="noopener">土土哥的技术博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我在2015年的时候，就尝试写博客，当时是在CSDN注册的账号，更新了几篇之后，由于懒，就没再更新了。现在连账号都找不到了，囧。最近突发奇想，觉得搞一个博客，积累一下平时学习的知识，也蛮好的。于是就有了这篇博客，分享一下我的搭建个人博客的经历。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
